// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.4.
// **********************************************************************

#ifndef __STORAGE_H_
#define __STORAGE_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"
#include "servant/Application.h"


namespace Base
{
    enum STORAGE_RT
    {
        S_OK = 0,
        S_NO_DATA = -1,
        S_ERROR = -2,
        S_VERSION = -3,
        S_TIMESTAMP = -4,
        S_TABLE_NAME = -5,
        S_TABLE_EXIST = -6,
        S_TABLE_NOT_EXIST = -7,
    };
    inline string etos(const STORAGE_RT & e)
    {
        switch(e)
        {
            case S_OK: return "S_OK";
            case S_NO_DATA: return "S_NO_DATA";
            case S_ERROR: return "S_ERROR";
            case S_VERSION: return "S_VERSION";
            case S_TIMESTAMP: return "S_TIMESTAMP";
            case S_TABLE_NAME: return "S_TABLE_NAME";
            case S_TABLE_EXIST: return "S_TABLE_EXIST";
            case S_TABLE_NOT_EXIST: return "S_TABLE_NOT_EXIST";
            default: return "";
        }
    }
    inline int stoe(const string & s, STORAGE_RT & e)
    {
        if(s == "S_OK")  { e=S_OK; return 0;}
        if(s == "S_NO_DATA")  { e=S_NO_DATA; return 0;}
        if(s == "S_ERROR")  { e=S_ERROR; return 0;}
        if(s == "S_VERSION")  { e=S_VERSION; return 0;}
        if(s == "S_TIMESTAMP")  { e=S_TIMESTAMP; return 0;}
        if(s == "S_TABLE_NAME")  { e=S_TABLE_NAME; return 0;}
        if(s == "S_TABLE_EXIST")  { e=S_TABLE_EXIST; return 0;}
        if(s == "S_TABLE_NOT_EXIST")  { e=S_TABLE_NOT_EXIST; return 0;}

        return -1;
    }

    struct Options : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Base.Options";
        }
        static string MD5()
        {
            return "e2c4c8305a9075ebd29458f561b1f204";
        }
        Options()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            leader = false;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (leader != false)
            {
                _os.write(leader, 0);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(leader, 0, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["leader"] = tars::JsonOutput::writeJson(leader);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(leader,pObj->value["leader"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(leader,"leader");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(leader, false);
            return _os;
        }
    public:
        tars::Bool leader;
    };
    inline bool operator==(const Options&l, const Options&r)
    {
        return l.leader == r.leader;
    }
    inline bool operator!=(const Options&l, const Options&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const Options&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,Options&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct StorageKey : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Base.StorageKey";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        StorageKey()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            table = "";
            mkey = "";
            ukey = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (table != "")
            {
                _os.write(table, 0);
            }
            if (mkey != "")
            {
                _os.write(mkey, 1);
            }
            if (ukey != "")
            {
                _os.write(ukey, 2);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(table, 0, false);
            _is.read(mkey, 1, false);
            _is.read(ukey, 2, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["table"] = tars::JsonOutput::writeJson(table);
            p->value["mkey"] = tars::JsonOutput::writeJson(mkey);
            p->value["ukey"] = tars::JsonOutput::writeJson(ukey);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(table,pObj->value["table"], false);
            tars::JsonInput::readJson(mkey,pObj->value["mkey"], false);
            tars::JsonInput::readJson(ukey,pObj->value["ukey"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(table,"table");
            _ds.display(mkey,"mkey");
            _ds.display(ukey,"ukey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(table, true);
            _ds.displaySimple(mkey, true);
            _ds.displaySimple(ukey, false);
            return _os;
        }
    public:
        std::string table;
        std::string mkey;
        std::string ukey;
    };
    inline bool operator==(const StorageKey&l, const StorageKey&r)
    {
        return l.table == r.table && l.mkey == r.mkey && l.ukey == r.ukey;
    }
    inline bool operator!=(const StorageKey&l, const StorageKey&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const StorageKey&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,StorageKey&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }
    inline bool operator<(const StorageKey&l, const StorageKey&r)
    {
        if(l.mkey != r.mkey)  return (l.mkey < r.mkey);
        if(l.ukey != r.ukey)  return (l.ukey < r.ukey);
        return false;
    }
    inline bool operator<=(const StorageKey&l, const StorageKey&r)
    {
        return !(r < l);
    }
    inline bool operator>(const StorageKey&l, const StorageKey&r)
    {
        return r < l;
    }
    inline bool operator>=(const StorageKey&l, const StorageKey&r)
    {
        return !(l < r);
    }

    struct StorageValue : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Base.StorageValue";
        }
        static string MD5()
        {
            return "4922201fc9f8a18cf1c6aa35385e90bb";
        }
        StorageValue()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            expireTime = 0;
            version = 0;
            timestamp = 0;
            data.clear();
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (expireTime != 0)
            {
                _os.write(expireTime, 0);
            }
            if (version != 0)
            {
                _os.write(version, 1);
            }
            if (timestamp != 0)
            {
                _os.write(timestamp, 2);
            }
            if (data.size() > 0)
            {
                _os.write(data, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(expireTime, 0, false);
            _is.read(version, 1, false);
            _is.read(timestamp, 2, false);
            _is.read(data, 3, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["expireTime"] = tars::JsonOutput::writeJson(expireTime);
            p->value["version"] = tars::JsonOutput::writeJson(version);
            p->value["timestamp"] = tars::JsonOutput::writeJson(timestamp);
            p->value["data"] = tars::JsonOutput::writeJson(data);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(expireTime,pObj->value["expireTime"], false);
            tars::JsonInput::readJson(version,pObj->value["version"], false);
            tars::JsonInput::readJson(timestamp,pObj->value["timestamp"], false);
            tars::JsonInput::readJson(data,pObj->value["data"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(expireTime,"expireTime");
            _ds.display(version,"version");
            _ds.display(timestamp,"timestamp");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(expireTime, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        tars::Int32 expireTime;
        tars::Int32 version;
        tars::Int64 timestamp;
        vector<tars::Char> data;
    };
    inline bool operator==(const StorageValue&l, const StorageValue&r)
    {
        return l.expireTime == r.expireTime && l.version == r.version && l.timestamp == r.timestamp && l.data == r.data;
    }
    inline bool operator!=(const StorageValue&l, const StorageValue&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const StorageValue&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,StorageValue&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct StorageData : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Base.StorageData";
        }
        static string MD5()
        {
            return "e5ebddc20f6a0af27870948daf4bd72c";
        }
        StorageData()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            skey.resetDefautlt();
            svalue.resetDefautlt();
            ret = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(skey, 0);
            _os.write(svalue, 1);
            if (ret != 0)
            {
                _os.write(ret, 2);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(skey, 0, false);
            _is.read(svalue, 1, false);
            _is.read(ret, 2, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["skey"] = tars::JsonOutput::writeJson(skey);
            p->value["svalue"] = tars::JsonOutput::writeJson(svalue);
            p->value["ret"] = tars::JsonOutput::writeJson(ret);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(skey,pObj->value["skey"], false);
            tars::JsonInput::readJson(svalue,pObj->value["svalue"], false);
            tars::JsonInput::readJson(ret,pObj->value["ret"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(skey,"skey");
            _ds.display(svalue,"svalue");
            _ds.display(ret,"ret");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(skey, true);
            _ds.displaySimple(svalue, true);
            _ds.displaySimple(ret, false);
            return _os;
        }
    public:
        Base::StorageKey skey;
        Base::StorageValue svalue;
        tars::Int32 ret;
    };
    inline bool operator==(const StorageData&l, const StorageData&r)
    {
        return l.skey == r.skey && l.svalue == r.svalue && l.ret == r.ret;
    }
    inline bool operator!=(const StorageData&l, const StorageData&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const StorageData&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,StorageData&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct PageReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Base.PageReq";
        }
        static string MD5()
        {
            return "ea9a6a585eeded431ae9e1cfe5cdd6d8";
        }
        PageReq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            skey.resetDefautlt();
            limit = 10;
            forword = true;
            include = true;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(skey, 0);
            if (limit != 10)
            {
                _os.write(limit, 1);
            }
            if (forword != true)
            {
                _os.write(forword, 2);
            }
            if (include != true)
            {
                _os.write(include, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(skey, 0, false);
            _is.read(limit, 1, false);
            _is.read(forword, 2, false);
            _is.read(include, 3, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["skey"] = tars::JsonOutput::writeJson(skey);
            p->value["limit"] = tars::JsonOutput::writeJson(limit);
            p->value["forword"] = tars::JsonOutput::writeJson(forword);
            p->value["include"] = tars::JsonOutput::writeJson(include);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(skey,pObj->value["skey"], false);
            tars::JsonInput::readJson(limit,pObj->value["limit"], false);
            tars::JsonInput::readJson(forword,pObj->value["forword"], false);
            tars::JsonInput::readJson(include,pObj->value["include"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(skey,"skey");
            _ds.display(limit,"limit");
            _ds.display(forword,"forword");
            _ds.display(include,"include");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(skey, true);
            _ds.displaySimple(limit, true);
            _ds.displaySimple(forword, true);
            _ds.displaySimple(include, false);
            return _os;
        }
    public:
        Base::StorageKey skey;
        tars::Int32 limit;
        tars::Bool forword;
        tars::Bool include;
    };
    inline bool operator==(const PageReq&l, const PageReq&r)
    {
        return l.skey == r.skey && l.limit == r.limit && l.forword == r.forword && l.include == r.include;
    }
    inline bool operator!=(const PageReq&l, const PageReq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const PageReq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,PageReq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class StoragePrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~StoragePrxCallback(){}
        virtual void callback_createTable(tars::Int32 ret)
        { throw std::runtime_error("callback_createTable() override incorrect."); }
        virtual void callback_createTable_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_createTable_exception() override incorrect."); }

        virtual void callback_del(tars::Int32 ret)
        { throw std::runtime_error("callback_del() override incorrect."); }
        virtual void callback_del_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_del_exception() override incorrect."); }

        virtual void callback_delBatch(tars::Int32 ret)
        { throw std::runtime_error("callback_delBatch() override incorrect."); }
        virtual void callback_delBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_delBatch_exception() override incorrect."); }

        virtual void callback_get(tars::Int32 ret,  const Base::StorageValue& data)
        { throw std::runtime_error("callback_get() override incorrect."); }
        virtual void callback_get_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_get_exception() override incorrect."); }

        virtual void callback_getBatch(tars::Int32 ret,  const vector<Base::StorageData>& data)
        { throw std::runtime_error("callback_getBatch() override incorrect."); }
        virtual void callback_getBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getBatch_exception() override incorrect."); }

        virtual void callback_has(tars::Int32 ret)
        { throw std::runtime_error("callback_has() override incorrect."); }
        virtual void callback_has_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_has_exception() override incorrect."); }

        virtual void callback_hasBatch(tars::Int32 ret,  const map<Base::StorageKey, tars::Int32>& rsp)
        { throw std::runtime_error("callback_hasBatch() override incorrect."); }
        virtual void callback_hasBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_hasBatch_exception() override incorrect."); }

        virtual void callback_set(tars::Int32 ret)
        { throw std::runtime_error("callback_set() override incorrect."); }
        virtual void callback_set_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_set_exception() override incorrect."); }

        virtual void callback_setBatch(tars::Int32 ret,  const map<Base::StorageKey, tars::Int32>& rsp)
        { throw std::runtime_error("callback_setBatch() override incorrect."); }
        virtual void callback_setBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_setBatch_exception() override incorrect."); }

        virtual void callback_trans(tars::Int32 ret,  const vector<Base::StorageData>& data)
        { throw std::runtime_error("callback_trans() override incorrect."); }
        virtual void callback_trans_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_trans_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Storage_all[]=
            {
                "createTable",
                "del",
                "delBatch",
                "get",
                "getBatch",
                "has",
                "hasBatch",
                "set",
                "setBatch",
                "trans"
            };
            pair<string*, string*> r = equal_range(__Storage_all, __Storage_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Storage_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_createTable_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "createTable", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_createTable(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_del_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "del", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_del(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_delBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "delBatch", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_delBatch(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_get_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Base::StorageValue data;
                    _is.read(data, 3, true);
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["data"] = tars::JsonOutput::writeJson(data);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "get", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_get(_ret, data);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Base::StorageData> data;
                    _is.read(data, 3, true);
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["data"] = tars::JsonOutput::writeJson(data);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "getBatch", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_getBatch(_ret, data);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_has_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "has", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_has(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_hasBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    map<Base::StorageKey, tars::Int32> rsp;
                    _is.read(rsp, 3, true);
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "hasBatch", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_hasBatch(_ret, rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_set_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "set", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_set(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_setBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    map<Base::StorageKey, tars::Int32> rsp;
                    _is.read(rsp, 2, true);
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "setBatch", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_setBatch(_ret, rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_trans_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Base::StorageData> data;
                    _is.read(data, 3, true);
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["data"] = tars::JsonOutput::writeJson(data);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "trans", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_trans(_ret, data);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<StoragePrxCallback> StoragePrxCallbackPtr;

    //callback of promise async proxy for client
    class StoragePrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~StoragePrxCallbackPromise(){}
    public:
        struct PromisecreateTable: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::PromisecreateTable > PromisecreateTablePtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisecreateTablePtr > &promise)
        : _promise_createTable(promise)
        {}
        
        virtual void callback_createTable(const StoragePrxCallbackPromise::PromisecreateTablePtr &ptr)
        {
            _promise_createTable.setValue(ptr);
        }
        virtual void callback_createTable_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:createTable_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_createTable.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisecreateTablePtr > _promise_createTable;

    public:
        struct Promisedel: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::Promisedel > PromisedelPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisedelPtr > &promise)
        : _promise_del(promise)
        {}
        
        virtual void callback_del(const StoragePrxCallbackPromise::PromisedelPtr &ptr)
        {
            _promise_del.setValue(ptr);
        }
        virtual void callback_del_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:del_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_del.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisedelPtr > _promise_del;

    public:
        struct PromisedelBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::PromisedelBatch > PromisedelBatchPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisedelBatchPtr > &promise)
        : _promise_delBatch(promise)
        {}
        
        virtual void callback_delBatch(const StoragePrxCallbackPromise::PromisedelBatchPtr &ptr)
        {
            _promise_delBatch.setValue(ptr);
        }
        virtual void callback_delBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:delBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_delBatch.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisedelBatchPtr > _promise_delBatch;

    public:
        struct Promiseget: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Base::StorageValue data;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::Promiseget > PromisegetPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisegetPtr > &promise)
        : _promise_get(promise)
        {}
        
        virtual void callback_get(const StoragePrxCallbackPromise::PromisegetPtr &ptr)
        {
            _promise_get.setValue(ptr);
        }
        virtual void callback_get_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:get_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_get.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisegetPtr > _promise_get;

    public:
        struct PromisegetBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Base::StorageData> data;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::PromisegetBatch > PromisegetBatchPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisegetBatchPtr > &promise)
        : _promise_getBatch(promise)
        {}
        
        virtual void callback_getBatch(const StoragePrxCallbackPromise::PromisegetBatchPtr &ptr)
        {
            _promise_getBatch.setValue(ptr);
        }
        virtual void callback_getBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getBatch.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisegetBatchPtr > _promise_getBatch;

    public:
        struct Promisehas: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::Promisehas > PromisehasPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisehasPtr > &promise)
        : _promise_has(promise)
        {}
        
        virtual void callback_has(const StoragePrxCallbackPromise::PromisehasPtr &ptr)
        {
            _promise_has.setValue(ptr);
        }
        virtual void callback_has_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:has_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_has.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisehasPtr > _promise_has;

    public:
        struct PromisehasBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<Base::StorageKey, tars::Int32> rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::PromisehasBatch > PromisehasBatchPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisehasBatchPtr > &promise)
        : _promise_hasBatch(promise)
        {}
        
        virtual void callback_hasBatch(const StoragePrxCallbackPromise::PromisehasBatchPtr &ptr)
        {
            _promise_hasBatch.setValue(ptr);
        }
        virtual void callback_hasBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:hasBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_hasBatch.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisehasBatchPtr > _promise_hasBatch;

    public:
        struct Promiseset: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::Promiseset > PromisesetPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisesetPtr > &promise)
        : _promise_set(promise)
        {}
        
        virtual void callback_set(const StoragePrxCallbackPromise::PromisesetPtr &ptr)
        {
            _promise_set.setValue(ptr);
        }
        virtual void callback_set_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:set_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_set.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisesetPtr > _promise_set;

    public:
        struct PromisesetBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<Base::StorageKey, tars::Int32> rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::PromisesetBatch > PromisesetBatchPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisesetBatchPtr > &promise)
        : _promise_setBatch(promise)
        {}
        
        virtual void callback_setBatch(const StoragePrxCallbackPromise::PromisesetBatchPtr &ptr)
        {
            _promise_setBatch.setValue(ptr);
        }
        virtual void callback_setBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:setBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_setBatch.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisesetBatchPtr > _promise_setBatch;

    public:
        struct Promisetrans: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Base::StorageData> data;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StoragePrxCallbackPromise::Promisetrans > PromisetransPtr;

        StoragePrxCallbackPromise(const tars::Promise< StoragePrxCallbackPromise::PromisetransPtr > &promise)
        : _promise_trans(promise)
        {}
        
        virtual void callback_trans(const StoragePrxCallbackPromise::PromisetransPtr &ptr)
        {
            _promise_trans.setValue(ptr);
        }
        virtual void callback_trans_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:trans_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_trans.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< StoragePrxCallbackPromise::PromisetransPtr > _promise_trans;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Storage_all[]=
            {
                "createTable",
                "del",
                "delBatch",
                "get",
                "getBatch",
                "has",
                "hasBatch",
                "set",
                "setBatch",
                "trans"
            };

            pair<string*, string*> r = equal_range(__Storage_all, __Storage_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Storage_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_createTable_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisecreateTablePtr ptr = new StoragePrxCallbackPromise::PromisecreateTable();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_createTable_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_createTable_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_createTable(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_del_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisedelPtr ptr = new StoragePrxCallbackPromise::Promisedel();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_del_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_del_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_del(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_delBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisedelBatchPtr ptr = new StoragePrxCallbackPromise::PromisedelBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_delBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_delBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_delBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_get_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisegetPtr ptr = new StoragePrxCallbackPromise::Promiseget();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->data, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_get(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisegetBatchPtr ptr = new StoragePrxCallbackPromise::PromisegetBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->data, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_getBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_has_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisehasPtr ptr = new StoragePrxCallbackPromise::Promisehas();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_has_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_has_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_has(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_hasBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisehasBatchPtr ptr = new StoragePrxCallbackPromise::PromisehasBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_hasBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_hasBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_hasBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_set_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisesetPtr ptr = new StoragePrxCallbackPromise::Promiseset();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_set_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_set_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_set(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_setBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisesetBatchPtr ptr = new StoragePrxCallbackPromise::PromisesetBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_setBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_setBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_setBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_trans_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    StoragePrxCallbackPromise::PromisetransPtr ptr = new StoragePrxCallbackPromise::Promisetrans();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->data, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_trans_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_trans_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_trans(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<StoragePrxCallbackPromise> StoragePrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class StorageCoroPrxCallback: public StoragePrxCallback
    {
    public:
        virtual ~StorageCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Storage_all[]=
            {
                "createTable",
                "del",
                "delBatch",
                "get",
                "getBatch",
                "has",
                "hasBatch",
                "set",
                "setBatch",
                "trans"
            };

            pair<string*, string*> r = equal_range(__Storage_all, __Storage_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Storage_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_createTable_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_createTable(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_createTable_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_createTable_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_del_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_del(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_del_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_del_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_delBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_delBatch(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_delBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_delBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_get_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Base::StorageValue data;
                        _is.read(data, 3, true);
                        setResponseContext(msg->response->context);

                        callback_get(_ret, data);

                    }
                    catch(std::exception &ex)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_get_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Base::StorageData> data;
                        _is.read(data, 3, true);
                        setResponseContext(msg->response->context);

                        callback_getBatch(_ret, data);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_has_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_has(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_has_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_has_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_hasBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        map<Base::StorageKey, tars::Int32> rsp;
                        _is.read(rsp, 3, true);
                        setResponseContext(msg->response->context);

                        callback_hasBatch(_ret, rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_hasBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_hasBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_set_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_set(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_set_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_set_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_setBatch_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        map<Base::StorageKey, tars::Int32> rsp;
                        _is.read(rsp, 2, true);
                        setResponseContext(msg->response->context);

                        callback_setBatch(_ret, rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_setBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_setBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_trans_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Base::StorageData> data;
                        _is.read(data, 3, true);
                        setResponseContext(msg->response->context);

                        callback_trans(_ret, data);

                    }
                    catch(std::exception &ex)
                    {
                        callback_trans_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_trans_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<StorageCoroPrxCallback> StorageCoroPrxCallbackPtr;

    /* proxy for client */
    class StorageProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 createTable(const std::string & table,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(table, 1);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["table"] = tars::JsonOutput::writeJson(table);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "createTable", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"createTable", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "createTable", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_createTable(StoragePrxCallbackPtr callback,const std::string &table,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(table, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["table"] = tars::JsonOutput::writeJson(table);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "createTable", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"createTable", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisecreateTablePtr > promise_async_createTable(const std::string &table,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisecreateTablePtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(table, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"createTable", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_createTable(StorageCoroPrxCallbackPtr callback,const std::string &table,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(table, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"createTable", _os, context, _mStatus, callback, true);
        }

        tars::Int32 del(const Base::StorageKey & skey,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "del", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"del", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "del", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_del(StoragePrxCallbackPtr callback,const Base::StorageKey &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "del", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"del", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisedelPtr > promise_async_del(const Base::StorageKey &skey,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisedelPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"del", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_del(StorageCoroPrxCallbackPtr callback,const Base::StorageKey &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"del", _os, context, _mStatus, callback, true);
        }

        tars::Int32 delBatch(const vector<Base::StorageKey> & skey,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "delBatch", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"delBatch", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "delBatch", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_delBatch(StoragePrxCallbackPtr callback,const vector<Base::StorageKey> &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "delBatch", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"delBatch", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisedelBatchPtr > promise_async_delBatch(const vector<Base::StorageKey> &skey,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisedelBatchPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"delBatch", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_delBatch(StorageCoroPrxCallbackPtr callback,const vector<Base::StorageKey> &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(skey, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"delBatch", _os, context, _mStatus, callback, true);
        }

        tars::Int32 get(const Base::Options & opt,const Base::StorageKey & skey,Base::StorageValue &data,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            _os.write(data, 3);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "get", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"get", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(data, 3, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "get", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_get(StoragePrxCallbackPtr callback,const Base::Options &opt,const Base::StorageKey &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "get", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"get", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisegetPtr > promise_async_get(const Base::Options &opt,const Base::StorageKey &skey,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisegetPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"get", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_get(StorageCoroPrxCallbackPtr callback,const Base::Options &opt,const Base::StorageKey &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"get", _os, context, _mStatus, callback, true);
        }

        tars::Int32 getBatch(const Base::Options & opt,const vector<Base::StorageKey> & skey,vector<Base::StorageData> &data,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            _os.write(data, 3);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "getBatch", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"getBatch", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(data, 3, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "getBatch", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_getBatch(StoragePrxCallbackPtr callback,const Base::Options &opt,const vector<Base::StorageKey> &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "getBatch", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"getBatch", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisegetBatchPtr > promise_async_getBatch(const Base::Options &opt,const vector<Base::StorageKey> &skey,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisegetBatchPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getBatch", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getBatch(StorageCoroPrxCallbackPtr callback,const Base::Options &opt,const vector<Base::StorageKey> &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getBatch", _os, context, _mStatus, callback, true);
        }

        tars::Int32 has(const Base::Options & opt,const Base::StorageKey & skey,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "has", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"has", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "has", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_has(StoragePrxCallbackPtr callback,const Base::Options &opt,const Base::StorageKey &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "has", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"has", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisehasPtr > promise_async_has(const Base::Options &opt,const Base::StorageKey &skey,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisehasPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"has", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_has(StorageCoroPrxCallbackPtr callback,const Base::Options &opt,const Base::StorageKey &skey,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(skey, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"has", _os, context, _mStatus, callback, true);
        }

        tars::Int32 hasBatch(const Base::Options & opt,const vector<Base::StorageKey> & data,map<Base::StorageKey, tars::Int32> &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(data, 2);
            _os.write(rsp, 3);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "hasBatch", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"hasBatch", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 3, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "hasBatch", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_hasBatch(StoragePrxCallbackPtr callback,const Base::Options &opt,const vector<Base::StorageKey> &data,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(data, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "hasBatch", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"hasBatch", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisehasBatchPtr > promise_async_hasBatch(const Base::Options &opt,const vector<Base::StorageKey> &data,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisehasBatchPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(data, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"hasBatch", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_hasBatch(StorageCoroPrxCallbackPtr callback,const Base::Options &opt,const vector<Base::StorageKey> &data,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(data, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"hasBatch", _os, context, _mStatus, callback, true);
        }

        tars::Int32 set(const Base::StorageData & data,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "set", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"set", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "set", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_set(StoragePrxCallbackPtr callback,const Base::StorageData &data,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "set", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"set", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisesetPtr > promise_async_set(const Base::StorageData &data,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisesetPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"set", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_set(StorageCoroPrxCallbackPtr callback,const Base::StorageData &data,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"set", _os, context, _mStatus, callback, true);
        }

        tars::Int32 setBatch(const vector<Base::StorageData> & data,map<Base::StorageKey, tars::Int32> &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            _os.write(rsp, 2);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "setBatch", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"setBatch", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 2, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "setBatch", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_setBatch(StoragePrxCallbackPtr callback,const vector<Base::StorageData> &data,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "setBatch", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"setBatch", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisesetBatchPtr > promise_async_setBatch(const vector<Base::StorageData> &data,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisesetBatchPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"setBatch", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_setBatch(StorageCoroPrxCallbackPtr callback,const vector<Base::StorageData> &data,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(data, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"setBatch", _os, context, _mStatus, callback, true);
        }

        tars::Int32 trans(const Base::Options & opt,const Base::PageReq & req,vector<Base::StorageData> &data,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(req, 2);
            _os.write(data, 3);
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "trans", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"trans", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(data, 3, true);
            if (pSptd && pSptd->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "trans", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_trans(StoragePrxCallbackPtr callback,const Base::Options &opt,const Base::PageReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
            if (pSptd && pSptd->_traceCall)
            {
                pSptd->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "trans", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"trans", _os, context, _mStatus, callback);
        }
        
        tars::Future< StoragePrxCallbackPromise::PromisetransPtr > promise_async_trans(const Base::Options &opt,const Base::PageReq &req,const map<string, string>& context)
        {
            tars::Promise< StoragePrxCallbackPromise::PromisetransPtr > promise;
            StoragePrxCallbackPromisePtr callback = new StoragePrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"trans", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_trans(StorageCoroPrxCallbackPtr callback,const Base::Options &opt,const Base::PageReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(opt, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"trans", _os, context, _mStatus, callback, true);
        }

        StorageProxy* tars_hash(int64_t key)
        {
            return (StorageProxy*)ServantProxy::tars_hash(key);
        }

        StorageProxy* tars_consistent_hash(int64_t key)
        {
            return (StorageProxy*)ServantProxy::tars_consistent_hash(key);
        }

        StorageProxy* tars_open_trace(bool traceParam = false)
        {
            return (StorageProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        StorageProxy* tars_set_timeout(int msecond)
        {
            return (StorageProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "StorageProxy"; }
    };
    typedef tars::TC_AutoPtr<StorageProxy> StoragePrx;

    /* servant for server */
    class Storage : public tars::Servant
    {
    public:
        virtual ~Storage(){}
        virtual tars::Int32 createTable(const std::string & table,tars::TarsCurrentPtr current) = 0;
        static void async_response_createTable(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "createTable", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 del(const Base::StorageKey & skey,tars::TarsCurrentPtr current) = 0;
        static void async_response_del(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "del", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 delBatch(const vector<Base::StorageKey> & skey,tars::TarsCurrentPtr current) = 0;
        static void async_response_delBatch(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "delBatch", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 get(const Base::Options & opt,const Base::StorageKey & skey,Base::StorageValue &data,tars::TarsCurrentPtr current) = 0;
        static void async_response_get(tars::TarsCurrentPtr current, tars::Int32 _ret, const Base::StorageValue &data)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("data", data);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["data"] = tars::JsonOutput::writeJson(data);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(data, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "get", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 getBatch(const Base::Options & opt,const vector<Base::StorageKey> & skey,vector<Base::StorageData> &data,tars::TarsCurrentPtr current) = 0;
        static void async_response_getBatch(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Base::StorageData> &data)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("data", data);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["data"] = tars::JsonOutput::writeJson(data);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(data, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "getBatch", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 has(const Base::Options & opt,const Base::StorageKey & skey,tars::TarsCurrentPtr current) = 0;
        static void async_response_has(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "has", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 hasBatch(const Base::Options & opt,const vector<Base::StorageKey> & data,map<Base::StorageKey, tars::Int32> &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_hasBatch(tars::TarsCurrentPtr current, tars::Int32 _ret, const map<Base::StorageKey, tars::Int32> &rsp)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "hasBatch", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 set(const Base::StorageData & data,tars::TarsCurrentPtr current) = 0;
        static void async_response_set(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "set", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 setBatch(const vector<Base::StorageData> & data,map<Base::StorageKey, tars::Int32> &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_setBatch(tars::TarsCurrentPtr current, tars::Int32 _ret, const map<Base::StorageKey, tars::Int32> &rsp)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "setBatch", 0, _trace_param_, "");
            }

        }

        virtual tars::Int32 trans(const Base::Options & opt,const Base::PageReq & req,vector<Base::StorageData> &data,tars::TarsCurrentPtr current) = 0;
        static void async_response_trans(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Base::StorageData> &data)
        {
            size_t _rsp_len_ = 0;
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);
                tarsAttr.put("data", data);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["data"] = tars::JsonOutput::writeJson(data);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(data, 3);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
                _rsp_len_ = _os.getLength();
            }
            if (current->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, current->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["data"] = tars::JsonOutput::writeJson(data);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(current->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "trans", 0, _trace_param_, "");
            }

        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __Base__Storage_all[]=
            {
                "createTable",
                "del",
                "delBatch",
                "get",
                "getBatch",
                "has",
                "hasBatch",
                "set",
                "setBatch",
                "trans"
            };

            pair<string*, string*> r = equal_range(__Base__Storage_all, __Base__Storage_all+10, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Base__Storage_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string table;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("table", table);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(table, _jsonPtr->value["table"], true);
                    }
                    else
                    {
                        _is.read(table, 1, true);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["table"] = tars::JsonOutput::writeJson(table);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "createTable", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = createTable(table, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "createTable", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::StorageKey skey;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("skey", skey);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(skey, _jsonPtr->value["skey"], true);
                    }
                    else
                    {
                        _is.read(skey, 1, true);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "del", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = del(skey, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "del", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<Base::StorageKey> skey;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("skey", skey);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(skey, _jsonPtr->value["skey"], true);
                    }
                    else
                    {
                        _is.read(skey, 1, true);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "delBatch", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = delBatch(skey, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "delBatch", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::Options opt;
                    Base::StorageKey skey;
                    Base::StorageValue data;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("opt", opt);
                        tarsAttr.get("skey", skey);
                        tarsAttr.getByDefault("data", data, data);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(opt, _jsonPtr->value["opt"], true);
                        tars::JsonInput::readJson(skey, _jsonPtr->value["skey"], true);
                        tars::JsonInput::readJson(data, _jsonPtr->value["data"], false);
                    }
                    else
                    {
                        _is.read(opt, 1, true);
                        _is.read(skey, 2, true);
                        _is.read(data, 3, false);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                            _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "get", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = get(opt,skey,data, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("data", data);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["data"] = tars::JsonOutput::writeJson(data);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(data, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["data"] = tars::JsonOutput::writeJson(data);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "get", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::Options opt;
                    vector<Base::StorageKey> skey;
                    vector<Base::StorageData> data;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("opt", opt);
                        tarsAttr.get("skey", skey);
                        tarsAttr.getByDefault("data", data, data);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(opt, _jsonPtr->value["opt"], true);
                        tars::JsonInput::readJson(skey, _jsonPtr->value["skey"], true);
                        tars::JsonInput::readJson(data, _jsonPtr->value["data"], false);
                    }
                    else
                    {
                        _is.read(opt, 1, true);
                        _is.read(skey, 2, true);
                        _is.read(data, 3, false);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                            _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "getBatch", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = getBatch(opt,skey,data, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("data", data);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["data"] = tars::JsonOutput::writeJson(data);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(data, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["data"] = tars::JsonOutput::writeJson(data);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "getBatch", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::Options opt;
                    Base::StorageKey skey;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("opt", opt);
                        tarsAttr.get("skey", skey);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(opt, _jsonPtr->value["opt"], true);
                        tars::JsonInput::readJson(skey, _jsonPtr->value["skey"], true);
                    }
                    else
                    {
                        _is.read(opt, 1, true);
                        _is.read(skey, 2, true);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                            _p_->value["skey"] = tars::JsonOutput::writeJson(skey);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "has", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = has(opt,skey, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "has", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::Options opt;
                    vector<Base::StorageKey> data;
                    map<Base::StorageKey, tars::Int32> rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("opt", opt);
                        tarsAttr.get("data", data);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(opt, _jsonPtr->value["opt"], true);
                        tars::JsonInput::readJson(data, _jsonPtr->value["data"], true);
                        tars::JsonInput::readJson(rsp, _jsonPtr->value["rsp"], false);
                    }
                    else
                    {
                        _is.read(opt, 1, true);
                        _is.read(data, 2, true);
                        _is.read(rsp, 3, false);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                            _p_->value["data"] = tars::JsonOutput::writeJson(data);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "hasBatch", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = hasBatch(opt,data,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "hasBatch", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::StorageData data;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("data", data);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(data, _jsonPtr->value["data"], true);
                    }
                    else
                    {
                        _is.read(data, 1, true);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["data"] = tars::JsonOutput::writeJson(data);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "set", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = set(data, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "set", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<Base::StorageData> data;
                    map<Base::StorageKey, tars::Int32> rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("data", data);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(data, _jsonPtr->value["data"], true);
                        tars::JsonInput::readJson(rsp, _jsonPtr->value["rsp"], false);
                    }
                    else
                    {
                        _is.read(data, 1, true);
                        _is.read(rsp, 2, false);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["data"] = tars::JsonOutput::writeJson(data);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "setBatch", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = setBatch(data,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "setBatch", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::Options opt;
                    Base::PageReq req;
                    vector<Base::StorageData> data;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("opt", opt);
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("data", data, data);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(opt, _jsonPtr->value["opt"], true);
                        tars::JsonInput::readJson(req, _jsonPtr->value["req"], true);
                        tars::JsonInput::readJson(data, _jsonPtr->value["data"], false);
                    }
                    else
                    {
                        _is.read(opt, 1, true);
                        _is.read(req, 2, true);
                        _is.read(data, 3, false);
                    }
                    ServantProxyThreadData *pSptd = ServantProxyThreadData::getData();
                    if (pSptd && pSptd->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["opt"] = tars::JsonOutput::writeJson(opt);
                            _p_->value["req"] = tars::JsonOutput::writeJson(req);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "trans", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = trans(opt,req,data, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.put("data", data);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["data"] = tars::JsonOutput::writeJson(data);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(data, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (pSptd && pSptd->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = pSptd->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["data"] = tars::JsonOutput::writeJson(data);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "trans", 0, _trace_param_, "");
                        }

                    }
                    else if(pSptd && pSptd->_traceCall)
                    {
                        _current->setTrace(pSptd->_traceCall, pSptd->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
